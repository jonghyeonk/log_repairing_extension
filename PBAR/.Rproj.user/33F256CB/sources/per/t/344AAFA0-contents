



{

# data_all = c('Small', 'Medium', 'Large', 'Huge' , 'Wide', 
#              'credit-card', 'mccloud','hospital_billing', 'Road_Traffic', 
#              'b12', 'b17')

data_all = c('Small')
for( data in data_all){
save_result = as.numeric()
rate = c('0.10', '0.25', '0.50', '1.00')
result= as.numeric()
for(i in 1:4){


setwd("C:/Users/whd1g/OneDrive/바탕 화면/볼차노/PBAR_extension/log_repairing_extension.v2/encoded_normal")
test =  read.csv( paste(data, ".csv", sep=''),T)
head(test)
# names(test)[2:3] = c('Case', 'Activity') #for clean_hospital_billing data
# names(test)[1:2] = c('Case', 'Activity') #for clean_clean_Road_Traffic.csv data , B12

setwd("C:/Users/whd1g/OneDrive/바탕 화면/볼차노/PBAR_extension/log_repairing_extension.v2/encoded_anomaly")
dat = read.csv(paste(data, "_", rate[i], ".csv", sep='' ),T)


####
setwd("C:/Users/whd1g/OneDrive/바탕 화면/볼차노/PBAR_extension/DeepAign/result")
align= read.csv(paste(data , "-" , rate[i] ,"-1_DeepAlign.csv",sep=''),T)


####

anomaly= unique(dat[,c(1,18)])
anomaly[which(anomaly$type_res_trace == ''), 'type_res_trace'] = 'normal'
# anomaly= anomaly[which(anomaly$type_res_trace!=''),]

repaired = align
test = test[which(is.element(test$Case, repaired$Case)),]

x = aggregate(repaired$Activity , by= list(repaired$Case), FUN= function(x){paste(x, collapse = '-')})
y = aggregate(test$Activity , by= list(test$Case), FUN= function(x){paste(x, collapse = '-')})

sum(as.character(x$Group.1)!=as.character(y$Group.1))
sum(as.character(x$Group.1)!=as.character(anomaly$Group.1))

reconst4= anomaly
names(reconst4)[2] = 'label'
reconst4[which(reconst4$label == ''), 'label'] = 'normal'
labelpadding = function(x){
  paste(sort(unlist(lapply( unlist(strsplit(x, split ="," )), FUN= function(x){
    gsub("[^a-zA-Z]", "", x)})))
    ,collapse = '+')
}

reconst4$label =  unlist(lapply( reconst4$label, FUN= function(x){labelpadding(x)}))

accuracy_pattern =0
accuracy =1- sum(as.character(x$x)!=as.character(y$x))/nrow(x)


loc_skip = which(is.element(y$Group.1,reconst4[which(reconst4$label=='skip'),'Case'] ))
accuracy_skip =1- sum( (as.character(x$x)!=as.character(y$x))[loc_skip] )/length(loc_skip)
loc_insert = which(is.element(y$Group.1,reconst4[which(reconst4$label=='insert'),'Case'] ))
accuracy_insert =1- sum( (as.character(x$x)!=as.character(y$x))[loc_insert] )/length(loc_insert)
loc_moved = which(is.element(y$Group.1,reconst4[which(reconst4$label=='moved'),'Case'] ))
accuracy_moved =1- sum( (as.character(x$x)!=as.character(y$x))[loc_moved] )/length(loc_moved)
loc_rework = which(is.element(y$Group.1,reconst4[which(reconst4$label=='rework'),'Case'] ))
accuracy_rework =1- sum( (as.character(x$x)!=as.character(y$x))[loc_rework] )/length(loc_rework)
loc_replace = which(is.element(y$Group.1,reconst4[which(reconst4$label=='replace'),'Case'] ))
accuracy_replace =1- sum( (as.character(x$x)!=as.character(y$x))[loc_replace] )/length(loc_replace)
loc_normal = which(is.element(y$Group.1,reconst4[which(reconst4$label=='normal'),'Case'] ))
accuracy_normal =1- sum( (as.character(x$x)!=as.character(y$x))[loc_normal] )/length(loc_normal)

normal_check = x[loc_normal,]
normal_check = normal_check[which( (as.character(x$x)!=as.character(y$x))[loc_normal] ),]
#173721

print(  paste("Reconstuction accuracy = ", ceiling(accuracy*10000)/10000, sep='') )
print(  paste("Reconstuction accuracy.skip = ", ceiling(accuracy_skip*10000)/10000, sep='') )
print(  paste("Reconstuction accuracy.insert = ", ceiling(accuracy_insert*10000)/10000, sep='') )
print(  paste("Reconstuction accuracy.rework = ", ceiling(accuracy_rework*10000)/10000, sep='') )
print(  paste("Reconstuction accuracy.replace = ", ceiling(accuracy_replace*10000)/10000, sep='') )
print(  paste("Reconstuction accuracy.moved = ", ceiling(accuracy_moved*10000)/10000, sep='') )
print(  paste("Reconstuction accuracy.normal = ", ceiling(accuracy_normal*10000)/10000, sep='') )

## performance on anomaly




reconst5 = reconst4[which(reconst4$label != 'normal'),]
x = reconst5
test2 = test[which(is.element(test$Case, x$Case)),]
y = aggregate(test2$Activity , by= list(test2$Case), FUN= function(x){paste(x, collapse = '>>')})
test3 = repaired[which(is.element(repaired$Case, x$Case)),]
x = aggregate(test3$Activity , by= list(test3$Case), FUN= function(x){paste(x, collapse = '>>')})

accuracy_anomaly =1- sum(as.character(x$x)!=as.character(y$x))/nrow(x)    



## performance on single pattern
reconst5 = reconst4[which(reconst4$label != 'normal'),]
x = reconst5
x1 = x[which( !unlist(lapply(reconst5$label, FUN= function(x){
  grepl('+',x, fixed = TRUE)
}))) ,]

test2 = test[which(is.element(test$Case, x1$Case)),]
y = aggregate(test2$Activity , by= list(test2$Case), FUN= function(x){paste(x, collapse = '>>')})
test3 = repaired[which(is.element(repaired$Case, x1$Case)),]
x1 = aggregate(test3$Activity , by= list(test3$Case), FUN= function(x){paste(x, collapse = '>>')})


accuracy_pattern_single =0
accuracy_single =1- sum(as.character(x1$x)!=as.character(y$x))/nrow(x1)


## performance on multiple patterns
reconst5 = reconst4[which(reconst4$label != 'normal'),]
x = reconst5
x2 = x[which( unlist(lapply(reconst5$label, FUN= function(x){
  grepl('+',x, fixed = TRUE)
}))) ,]

test2 = test[which(is.element(test$Case, x2$Case)),]
y = aggregate(test2$Activity , by= list(test2$Case), FUN= function(x){paste(x, collapse = '>>')})
test3 = repaired[which(is.element(repaired$Case, x2$Case)),]
x2 = aggregate(test3$Activity , by= list(test3$Case), FUN= function(x){paste(x, collapse = '>>')})

accuracy_pattern_multiple =0
accuracy_multiple =1- sum(as.character(x2$x)!=as.character(y$x))/nrow(x2)



library(stringdist)

anomaly= unique(dat[,c(1,18)])
n.c = unique(anomaly[which(anomaly$type_res_trace==''), 'Case'])
a.c = unique(anomaly[which(anomaly$type_res_trace!=''), 'Case'])

x= reconst4
test2 = test[which(is.element(test$Case, x$Case)),]

x.act = repaired$Activity
y.act = test2$Activity
z.act = dat$Activity

act.list = unique( c(x.act,y.act,z.act) )
letter.list = c(letters, LETTERS, 1:9)

if(length(act.list) > length(letter.list)){
  print("Over size problem: act.length > letters ")
}


x.act = apply( data.frame(x.act), 1, FUN= function(x){ letter.list[which(act.list==x)]} )  
y.act = apply( data.frame(y.act), 1, FUN= function(x){ letter.list[which(act.list==x)]} )  
z.act = apply( data.frame(z.act), 1, FUN= function(x){ letter.list[which(act.list==x)]} )  


str.x = aggregate(x.act , by= list(repaired$Case), FUN= function(x){paste(x, collapse = '')})
str.y = aggregate(y.act , by= list(test2$Case), FUN= function(x){paste(x, collapse = '')})
str.z = aggregate(z.act , by= list(dat$Case), FUN= function(x){paste(x, collapse = '')})

print(sum(str.x$Group.1 != str.y$Group.1))
print(sum(str.x$Group.1 != str.z$Group.1))

print( paste( "edit dist(before) = " ,mean(stringdist(str.z$x, str.y$x, method = "lv" )) , collapse = '') ) # error by edit distant (Levenshtein dist)
print( paste( "edit dist(after) = " ,mean(stringdist(str.x$x, str.y$x, method = "lv")) , collapse = '') ) # error by edit distant (Levenshtein dist)


save = c( data, rate[i] , ceiling(accuracy_pattern*10000)/10000,  
          ceiling(accuracy_pattern_single*10000)/10000, ceiling(accuracy_pattern_multiple*10000)/10000,
          ceiling(accuracy_skip*10000)/10000,  ceiling(accuracy_insert*10000)/10000, 
          ceiling(accuracy_rework*10000)/10000, ceiling(accuracy_replace*10000)/10000,
          ceiling(accuracy_moved*10000)/10000, ceiling(accuracy_normal*10000)/10000,
          ceiling(accuracy_anomaly*10000)/10000, ceiling(accuracy*10000)/10000,
          ceiling(accuracy_single*10000)/10000, ceiling(accuracy_multiple*10000)/10000,
          mean(stringdist(str.z$x, str.y$x, method = "lv")),
          mean(stringdist(str.x$x, str.y$x, method = "lv")), 0)

result= rbind(result, save)

}

result= data.frame(result)
names(result) = c("Data", "Rate","PatternACC", "PatternACC(single)", "PatternACC(multiple)",
                  'p.skip','p.insert','p.rework','p.replace','p.moved', 'p.normal', 'p.anomaly',
                  "ReconACC", "ReconACC(single)", "ReconACC(multiple)", 
                  "ReconERR.before", "ReconERR.after", "time")
setwd("C:/Users/whd1g/OneDrive/바탕 화면/볼차노/PBAR_extension/log_repairing_extension.v2/result_max_v2")
write.csv(result, paste(data, "_deepalign.csv", sep=''), row.names = F)
}
}
